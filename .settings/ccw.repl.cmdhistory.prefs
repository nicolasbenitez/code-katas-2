cmdhistory=["(search [2 9 40 90])" "(search 2 9 40 90)" "(search [2 9 40 90])" "(search 2 9 40 90)" "(search [2 9 40 90])" "(search 2 9 40 90)" "(search [2 9 40 90])" "(search 2 9 40 90)" "(first (sort < (seq seqs)))" "(search 2 9 40 90)" "(reduce '(10 5 3 2))" "(reduce + '(10 5 3 2))" "(reduce + 10 5 3 2)" "(reduce + [10 5 3 2])" "(unpartial (fn [a] (fn [b]\\r\\n                              (fn [c]\\r\\n                                 (fn [d]\\r\\n                                   (+ a b c d))))) 10 5 3 2)" "((fn [a] (fn [b] (+ a b))) 10 5)" "(unpartial (fn [a] (fn [b] (+ a b))) 10 5)" "(unpartial (fn [a] (fn [b] (+ a b)) 10 5))" "(fn [a] (fn [b] (+ a b)) 10 5)" "(unpartial (fn [a]\\r\\n                            (fn [b]\\r\\n                              (fn [c]\\r\\n                                 (fn [d]\\r\\n                                   (+ a b c d))))) 10 5 3 2)" "(unpartial (fn [a] (fn [b] (+ a b)) 10 5))" "(runs-tests)" "(unpartial (fn [a] (fn [b] (+ a b)) 10 5))" "(unpartial (+ 10 5))" "((unpartial (fn [a] (fn [b] (+ a b)) 10 5)))" "(unpartial (fn [a] (fn [b] (+ a b))) 10 5)" "(unpartial ((fn [a] (fn [b] (+ a b))) 10 5))" "(unpartial (((fn [a] (fn [b] (+ a b))) 10 5)))" "(unpartial (+ 10 5))" "(run-tests unpartial)" "(run-tests)" "(search [2 9 40 90])" "code-katas-2.core" "(search [2 9 40 90])" "(search [1 2 3 4 5 6 7 8 9] [0.5 3/2 7 19])" "(clojure.set/intersection (apply set args)" "(clojure.set/intersection '(10 5) '(5))" "(intersection \#{1 2} \#{2 3} \#{3 4})" "(clojure.set/intersection \#{1 2} \#{2 3} \#{3 4})" "(clojure.set/intersection \#{1 2} \#{2 3} \#{2 3 4})" "(search [1 2 3 4 5 6 7 8 9] [0.5 3/2 7 19])" "(search [1 2 3 4 5 6 7 8 9])" "(search [1 2 3 4 5 6 7 8 9] [0.5 3/2 7 19])" "(search [1 2 3 4 5 6 7 8 9])" "(search [1 2 3 4 5 6 7 8 9] [0.5 3/2 7 19])" "(search [1 2 3 4 5 6 7 8 9])" "(search [1 2 3 4 5 6 7 8 9] [0.5 3/2 7 19])" "(search [1 2 3 4 5 6 7 8 9])" "(search [1 2 3 4 5 6 7 8 9] [0.5 3/2 7 19])" "(search [1 2 3 4 5 6 7 8 9])" "(search [1 2 3 4 5 6 7 8 9] [0.5 3/2 7 19])" "(clojure.set/intersection '(10 5) '(5))" "(search [1 2 3 4 5 6 7 8 9] [0.5 3/2 7 19])" "(clojure.set/intersection '(10 5) '(5))" "(search [1 2 3 4 5 6 7 8 9] [0.5 3/2 7 19])" "(search [1 2 3 4 5 6 7 8 9] )" "(search [1 2 3 4 5 6 7 8 9] [0.5 3/2 7 19])" "(search [1 2 3 4 5 6 7 8 9] )" "(search [1 2 3 4 5 6 7 8 9] [0.5 3/2 7 19])" "(search [1 2 3 4 5 6 7 8 9] )" "(search [1 2 3 4 5 6 7 8 9] [0.5 3/2 7 19])" "(some \#(\=5 %) [3 4])" "(some \#(\= 5 %) [3 4])" "(some \#(\= 5 %) [3 4 5])" "(search [1 2 3 4 5 6 7 8 9] )" "(search [1 2 3 4 5 6 7 8 9] [0.5 3/2 7 19])" "(search [1 2 3 4 5 6 7 8 9] )" "(search [1 2 3 4 5 6 7 8 9] [0.5 3/2 7 19])" "(search [1 2 3 4 5 6 7 8 9] )" "(search [1 2 3 4 5 6 7 8 9] [0.5 3/2 7 19])" "(search [1 2 3 4 5 6 7 8 9] )" "(search [1 2 3 4 5 6 7 8 9] [0.5 3/2 7 19])" "(search [1 2 3 4 5 6 7 8 9] )" "(search [1 2 3 4 5 6 7 8 9] [0.5 3/2 7 19])" "(search [1 2 3 4 5 6 7 8 9] )" "(search [1 2 3 4 5 6 7 8 9] [0.5 3/2 7 19])" "(search [1 2 3 4 5 6 7 8 9] )" "(search [1 2 3 4 5 6 7 8 9] [0.5 3/2 7 19])" "(search [1 2 3 4 5 6 7 8 9] )" "(search [1 2 3 4 5 6 7 8 9] [0.5 3/2 7 19])" "(search [1 2 3 4 5 6 7 8 9] )" "(search [1 2 3 4 5 6 7 8 9] [0.5 3/2 7 19])" "(search [1 2 3 4 5 6 7 8 9] )" "(search [1 2 3 4 5 6 7 8 9] [0.5 3/2 7 19])" "(not-any? 1 [1 2 3])" "(any? true? [1 2 3])" "(search [1 2 3 4 5 6 7 8 9] [0.5 3/2 7 19])" "(any? true? [1 2 3])" "run-tests" "(run-tests)" "((unpartial (fn [a] (fn [b] (fn [c] (fn [d] (+ a b c d)))))) 10 5 3 2)" "(unpartial (fn [a] (fn [b] (fn [c] (fn [d] (+ a b c d))))) 10 5 3 2)" "(unpartial ((fn [a] (fn [b] (fn [c] (fn [d] (+ a b c d))))) 10 5 3 2))" "(run-tests)" "(unpartial ((fn [a] (fn [b] (fn [c] (fn [d] (+ a b c d))))) 10 5 3 2))" "(fn [a] (fn [b] (fn [c] (fn [d] (+ a b c d)))) 10 5 3 2)" "(code-katas-2.core)" "(code-katas-2.core.unpartial)" "((unpartial (fn [a] (fn [b] (fn [c] (fn [d] (+ a b c d)))))) 10 5 3 2)" "(unpartial ((fn [a] (fn [b] (+ a b ))) 10 5 3 2))" "(run-tests)" "run" "(run-tests)" "run" "(run-tests)" "((k/unpartial (fn [a]\\r\\n                            (fn [b]\\r\\n                              (fn [c]\\r\\n                                 (fn [d]\\r\\n                                   (+ a b c d)))))) 10 5 3 2)" "((unpartial (fn [a]\\r\\n                            (fn [b]\\r\\n                              (fn [c]\\r\\n                                 (fn [d]\\r\\n                                   (+ a b c d)))))) 10 5 3 2)" "(unpartial (fn [a]\\r\\n                            (fn [b]\\r\\n                              (fn [c]\\r\\n                                 (fn [d]\\r\\n                                   (+ a b c d))))) 10 5 3 2)" "(+ 2 2)" "(+ 3 3)" "(unpartial (fn [a]\\r\\n                            (fn [b]\\r\\n                              (fn [c]\\r\\n                                 (fn [d]\\r\\n                                   (+ a b c d))))) 10 5 3 2)" "(unpartial ((fn [a]\\r\\n                            (fn [b]\\r\\n                              (fn [c]\\r\\n                                 (fn [d]\\r\\n                                   (+ a b c d))))) 10 5 3 2))" "(run-tests)" "(+ 22 3)" "(run-tests)" "(+ 22 3)" "run" "(run-tests)" "(+ 2 3)" "(search [2 9 40 90])" "(search [9 40 90] [2 9])" "(search [2 9 40 90])" "(search [9 40 90] [2 ])" "(search [9 40 90] [2 9])" "(search [9 40 90] [2 40])" "(search [2 40 90] [2 40])" "(unpartial ((fn [a]\\r\\n                            (fn [b]\\r\\n                              (fn [c]\\r\\n                                 (fn [d]\\r\\n                                   (+ a b c d))))) 10 5 3 2))" "(run-tests)" "(+ 2 2)" "(run-tests)" "(+ 2 2)" "(run-tests)" "(+ 2 2)" "(run-tests)" "(+ 2 2)" "(run-tests)" "(runs" "(run-tests)" "(search [9 40 90] [2 40])" "(search [9 40 90] [2 40 90])" "(search [9 90] [2 40 90])" "(+ 2 2)" "(run-tests)" "(+ 2 2)" "(run-tests)" "(run-all-tests)" "(run-tests)" "(+ 2 2)" "(run-tests)"]
eclipse.preferences.version=1
